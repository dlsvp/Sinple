/**
 * 频道对象结构说明，包含以下属性：
 * - groupName: String, // 分组名
 * - name: String, // 频道名
 * - epgName: String, // 节目单名
 * - url: String, // 播放链接
 * - logo: String?, // 频道图标（可选属性，可能为空）
 * - httpUserAgent: String?, // ua（可选属性，可能为空）
 * @param channelList 频道列表，传入的需要进行处理的频道数据集合
 * @returns 频道列表，经过一系列处理后返回的最终频道数据集合
 */

// 函数用于根据给定的映射关系，对频道列表中的每个频道的分组名称进行转换
function transformGroupNames(channelList, mapping) {
    return channelList.map(function (channel) {
        var newGroupName = mapping[channel.groupName] || channel.groupName;
        return Object.assign({}, channel, { groupName: newGroupName });
    });
}

// 函数用于按照给定的分组顺序对频道列表进行排序
function sortChannelsByGroupName(channelList, sort) {
    return channelList
      .map(function (channel, index) {
            return { channel: channel, originalIndex: index };
        })
      .sort(function (a, b) {
            var indexA = sort.indexOf(a.channel.groupName);
            var indexB = sort.indexOf(b.channel.groupName);

            indexA = indexA === -1? sort.length : indexA;
            indexB = indexB === -1? sort.length : indexB;

            return indexA - indexB || a.originalIndex - b.originalIndex;
        })
      .map(function (item) {
            return item.channel;
        });
}

// 函数用于对频道列表中的每个频道应用传入的转换函数func进行数据转换
function transformChannelList(channelList, func) {
    return channelList.map(function (channel) {
        var transformedChannel = func(channel);
        return Object.assign({}, channel, transformedChannel);
    });
}

// 函数用于根据给定的要过滤掉的频道名称列表，过滤掉频道列表中对应的频道
function filterOutChannels(channelList, filterOutChannelNameList) {
    return channelList.filter(function (channel) {
        return filterOutChannelNameList.indexOf(channel.name) === -1;
    });
}

// 函数用于根据给定的要过滤掉的频道组名称列表，过滤掉频道列表中属于这些组的频道
function filterOutChannelsByGroup(channelList, filterOutGroupNameList) {
    return channelList.filter(function (channel) {
        return filterOutGroupNameList.indexOf(channel.groupName) === -1;
    });
}

// 函数用于处理频道分组的移动
function moveChannelsToGroups(channelList, moveMap) {
    return channelList.map(function (channel) {
        var newGroupName = moveMap[channel.name] || channel.groupName;
        return Object.assign({}, channel, { groupName: newGroupName });
    });
}

// 新增函数，用于解析外部格式的频道信息字符串，转换为频道对象格式
function parseExternalChannelInfo(str) {
    let lines = str.split('\n');
    let channelObjects = [];
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].trim().startsWith('#EXTINF')) {
            let info = lines[i].match(/tvg-name="([^"]+)"\s*tvg-logo="([^"]+)"\s*group-title="([^"]+)"/);
            let name = info[1];
            let logo = info[2];
            let groupName = info[3];
            let url = lines[++i].trim();
            channelObjects.push({
                groupName: groupName,
                name: name,
                epgName: '', // 这里暂时设置为空字符串，可根据实际情况完善获取逻辑
                url: url,
                logo: logo,
                httpUserAgent: '' // 同样暂时设置为空，按需完善
            });
        }
    }
    return channelObjects;
}

function main(channelList, externalChannelInfo) {
    // 1. 配置相关数据结构
    // 频道分组映射对象，用于定义原分组名到新分组名的映射关系，可根据实际需求修改其中的键值对
    var groupNameMapping = {
        '分组名1': '改成的分组名2',
    };
    // 频道分组排序数组，定义了频道分组的期望顺序，频道列表将按照这个顺序进行排序，可按需调整顺序和添加更多分组名
    var groupNameSort = ['分组名1', '分组名2'];
    // 过滤掉的频道名称列表，频道列表中名称在此列表中的频道将被过滤掉，可根据实际要去除的频道名称进行修改
    var filterOutChannelNameList = ["不想要的频道名称1", "不想要的频道名称2"];
    // 要过滤掉的频道组名称列表，频道列表中属于这些组的频道将被过滤掉，这里可以根据实际需求填写具体的分组名
    var filterOutGroupNameList = ["要删除的分组名1", "要删除的分组名2", "列表更新时间", "4K频道"];
    // 指定要保留的分组名称数组，包含分组1和分组2，可根据实际分组名称修改，用于筛选出只属于这些分组的频道
    var targetGroupNames = ["分组1", "分组2"];
    // 频道数据转换函数，目前为空函数体，可根据实际需要对频道对象的其他属性等进行转换操作
    function transformChannel(channel) { }

    // 2. 解析并合并频道信息
    // 先解析外部格式的频道信息
    let parsedExternalChannels = parseExternalChannelInfo(externalChannelInfo);
    // 将解析后的外部频道信息合并到原频道列表中
    let combinedChannelList = channelList.concat(parsedExternalChannels);

    // 3. 进行频道列表的过滤操作
    // 先按频道名称过滤频道，调用filterOutChannels函数过滤掉名称在filterOutChannelNameList中的频道，返回过滤后的频道列表
    var filteredByChannelName = filterOutChannels(combinedChannelList, filterOutChannelNameList);
    // 再按频道组过滤频道，调用filterOutChannelsByGroup函数过滤掉属于filterOutGroupNameList中分组的频道，进一步筛选频道列表
    var filteredByGroupName = filterOutChannelsByGroup(filteredByChannelName, filterOutGroupNameList);

    // 4. 处理频道分组的移动
    // 定义频道移动的映射关系，格式为 {频道名: 目标分组名}
    var channelMoveMap = {
        "频道1": "分组3",
        "频道2": "分组4",
        "频道3": "分组2"
    };
    // 调用moveChannelsToGroups函数处理频道分组移动
    var channelsAfterMove = moveChannelsToGroups(filteredByGroupName, channelMoveMap);

    // 5. 筛选出只保留指定分组的频道
    // 只保留分组1和分组2的频道，调用filter函数遍历channelsAfterMove列表，通过判断频道分组名是否在targetGroupNames数组中，筛选出符合条件的频道列表
    var onlyTargetGroups = channelsAfterMove.filter(function (channel) {
        return targetGroupNames.includes(channel.groupName);
    });

    // 6. 进行频道分组名转换、排序等后续操作
    // 先调用transformChannelList函数，传入空的transformChannel函数（可按需完善该函数进行频道数据转换）对onlyTargetGroups中的频道进行转换（目前无实际转换效果）
    var transformedChannelList = transformChannelList(onlyTargetGroups, transformChannel);
    // 接着调用transformGroupNames函数，根据groupNameMapping映射关系对转换后的频道列表进行分组名转换
    var transformedGroupNameList = transformGroupNames(transformedChannelList, groupNameMapping);
    // 最后调用sortChannelsByGroupName函数，按照groupNameSort定义的顺序对频道列表进行排序，并返回最终处理好的频道列表
    return sortChannelsByGroupName(transformedGroupNameList, groupNameSort);
}

// 示例用法，假设原频道列表channelList是已经存在的数据（这里简单模拟一个空数组示例），externalChannelInfo是外部格式的频道信息字符串
let channelList = [];
let externalChannelInfo = `
#EXTINF:-1 tvg-name="4K60PSDR-H264-AAC测试" tvg-logo="https://cdn.jsdelivr.net/gh/feiyangdigital/testvideo/tg.jpg" group-title="4K频道",4K60PSDR-H264-AAC测试
https://cdn.jsdelivr.net/gh/feiyangdigital/testvideo/sdr4kvideo/index.m3u8
#EXTINF:-1 tvg-name="4K60PHLG-HEVC-EAC3测试" tvg-logo="https://cdn.jsdelivr.net/gh/feiyangdigital/testvideo/tg.jpg" group-title="4K频道",4K60PHLG-HEVC-EAC3测试
https://cdn.jsdelivr.net/gh/feiyangdigital/testvideo/hlg4kvideo/index.m3u8`;
let finalChannelList = main(channelList, externalChannelInfo);
console.log(finalChannelList);